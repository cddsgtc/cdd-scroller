(function (global, factory) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global.howLongUntilLunch = factory()) }(this, (function () { 'use strict'; function isObject(value) { var type = typeof value; return value != null && (type == 'object' || type == 'function') } var isObject_1 = isObject; var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}; var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal; var _freeGlobal = freeGlobal; var freeSelf = typeof self == 'object' && self && self.Object === Object && self; var root = _freeGlobal || freeSelf || Function('return this')(); var _root = root; var now = function () { return _root.Date.now() }; var now_1 = now; var Symbol = _root.Symbol; var _Symbol = Symbol; var objectProto = Object.prototype; var hasOwnProperty = objectProto.hasOwnProperty; var nativeObjectToString = objectProto.toString; var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined; function getRawTag(value) { var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1]; try { value[symToStringTag$1] = undefined; var unmasked = true } catch (e) { } var result = nativeObjectToString.call(value); if (unmasked) { if (isOwn) { value[symToStringTag$1] = tag } else { delete value[symToStringTag$1] } } return result } var _getRawTag = getRawTag; var objectProto$1 = Object.prototype; var nativeObjectToString$1 = objectProto$1.toString; function objectToString(value) { return nativeObjectToString$1.call(value) } var _objectToString = objectToString; var nullTag = '[object Null]'; var undefinedTag = '[object Undefined]'; var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined; function baseGetTag(value) { if (value == null) { return value === undefined ? undefinedTag : nullTag } return (symToStringTag && symToStringTag in Object(value)) ? _getRawTag(value) : _objectToString(value) } var _baseGetTag = baseGetTag; function isObjectLike(value) { return value != null && typeof value == 'object' } var isObjectLike_1 = isObjectLike; var symbolTag = '[object Symbol]'; function isSymbol(value) { return typeof value == 'symbol' || (isObjectLike_1(value) && _baseGetTag(value) == symbolTag) } var isSymbol_1 = isSymbol; var NAN = 0 / 0; var reTrim = /^\s+|\s+$/g; var reIsBadHex = /^[-+]0x[0-9a-f]+$/i; var reIsBinary = /^0b[01]+$/i; var reIsOctal = /^0o[0-7]+$/i; var freeParseInt = parseInt; function toNumber(value) { if (typeof value == 'number') { return value } if (isSymbol_1(value)) { return NAN } if (isObject_1(value)) { var other = typeof value.valueOf == 'function' ? value.valueOf() : value; value = isObject_1(other) ? (other + '') : other } if (typeof value != 'string') { return value === 0 ? value : +value } value = value.replace(reTrim, ''); var isBinary = reIsBinary.test(value); return (isBinary || reIsOctal.test(value)) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : (reIsBadHex.test(value) ? NAN : +value) } var toNumber_1 = toNumber; var FUNC_ERROR_TEXT = 'Expected a function'; var nativeMax = Math.max; var nativeMin = Math.min; function debounce(func, wait, options) { var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true; if (typeof func != 'function') { throw new TypeError(FUNC_ERROR_TEXT) } wait = toNumber_1(wait) || 0; if (isObject_1(options)) { leading = !!options.leading; maxing = 'maxWait' in options; maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait; trailing = 'trailing' in options ? !!options.trailing : trailing } function invokeFunc(time) { var args = lastArgs, thisArg = lastThis; lastArgs = lastThis = undefined; lastInvokeTime = time; result = func.apply(thisArg, args); return result } function leadingEdge(time) { lastInvokeTime = time; timerId = setTimeout(timerExpired, wait); return leading ? invokeFunc(time) : result } function remainingWait(time) { var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall; return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result } function shouldInvoke(time) { var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime; return (lastCallTime === undefined || (timeSinceLastCall >= wait) || (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait)) } function timerExpired() { var time = now_1(); if (shouldInvoke(time)) { return trailingEdge(time) } timerId = setTimeout(timerExpired, remainingWait(time)) } function trailingEdge(time) { timerId = undefined; if (trailing && lastArgs) { return invokeFunc(time) } lastArgs = lastThis = undefined; return result } function cancel() { if (timerId !== undefined) { clearTimeout(timerId) } lastInvokeTime = 0; lastArgs = lastCallTime = lastThis = timerId = undefined } function flush() { return timerId === undefined ? result : trailingEdge(now_1()) } function debounced() { var time = now_1(), isInvoking = shouldInvoke(time); lastArgs = arguments; lastThis = this; lastCallTime = time; if (isInvoking) { if (timerId === undefined) { return leadingEdge(lastCallTime) } if (maxing) { timerId = setTimeout(timerExpired, wait); return invokeFunc(lastCallTime) } } if (timerId === undefined) { timerId = setTimeout(timerExpired, wait) } return result } debounced.cancel = cancel; debounced.flush = flush; return debounced } var debounce_1 = debounce; var FUNC_ERROR_TEXT$1 = 'Expected a function'; function throttle(func, wait, options) { var leading = true, trailing = true; if (typeof func != 'function') { throw new TypeError(FUNC_ERROR_TEXT$1) } if (isObject_1(options)) { leading = 'leading' in options ? !!options.leading : leading; trailing = 'trailing' in options ? !!options.trailing : trailing } return debounce_1(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing }) } var throttle_1 = throttle; let isNumber = require('lodash/isNumber'); console.log(`is Number is`, isNumber); class Scroller { constructor({ fElement = null, cElement = null, threshold = 20, arrived = () => { console.log(`需要有回调函数`) }, unarrived = null, up = null, down = 0, top = null, bottom = 0, modal = "debounce", frequency = 250 }) { this.config = { fElement: fElement, cElement: cElement, threshold: threshold, arrived: arrived, unarrived: unarrived, up: up, down: down, top: top, modal: modal, bottom: bottom, frequency: frequency }; this.init() } getBottom() { let [f, c] = [this.config.fElement, this.config.cElement]; if (isNumber(f.scrollTop)) { let [fheight, fclientHeight, top] = [Math.max(f.scrollHeight, f.clientHeight), Math.min(f.scrollHeight, f.clientHeight), f.scrollTop]; this.config.bottom = fheight - fclientHeight - top; this.config.top = top } } init() { let config = this.config; if (config.up != null && config.down == 0) { config.down = null } this.addScroller(this.config.modal) } addScroller(modal) { let self = this; if (modal == 'throttle') { this.config.fElement.addEventListener('scroll', throttle_1(function () { self.getBottom(); self.setCallback() }, self.config.frequency)) } else { this.config.fElement.addEventListener('scroll', debounce_1(function () { self.getBottom(); self.setCallback() }, self.config.frequency)) } } setCallback() { let config = this.config; if (isNumber(config.up) && isNumber(config.down)) { if (config.top <= config.up || config.bottom <= config.down) { config.arrived(config.fElement, config.cElement) } else { config.unarrived && (config.unarrived(config.fElement, config.cElement)) } } else if (isNumber(config.up)) { if (config.top <= config.up) { config.arrived(config.fElement, config.cElement) } else { config.unarrived && (config.unarrived(config.fElement, config.cElement)) } } else { if (config.bottom <= config.threshold) { config.arrived(config.fElement, config.cElement) } else { config.unarrived && (config.unarrived(config.fElement, config.cElement)) } } } } return Scroller })));